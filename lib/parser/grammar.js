/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,16],$V2=[4,12],$V3=[1,23],$V4=[1,26],$V5=[19,50,56],$V6=[1,36],$V7=[1,37],$V8=[1,38],$V9=[1,42],$Va=[1,41],$Vb=[9,22],$Vc=[1,51],$Vd=[1,52],$Ve=[11,30,31,32,37,43],$Vf=[35,36],$Vg=[1,66],$Vh=[16,19],$Vi=[9,22,25,26],$Vj=[1,77],$Vk=[1,78],$Vl=[35,36,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"mapper":3,"EOF":4,"map":5,"queries":6,"query":7,"query_header":8,"QUERY_BEGIN":9,"nodes":10,"END":11,"QUERY":12,"RESULT_MAP":13,"(":14,"query_args":15,")":16,"plugins":17,"CACHE":18,",":19,"QUERY_ARG":20,"plugin":21,"PLUGIN":22,"plugin_args":23,"plugin_arg":24,"PLUGIN_VAR":25,"PLUGIN_CONST":26,"node":27,"section":28,"fragment":29,"REFERENCE":30,"INLINE":31,"TEXT":32,"section_self_close":33,"section_header":34,"SECTION_END":35,"SECTION_SELF_CLOSE":36,"SECTION_DEF":37,"parameters":38,"parameter":39,"PARAMETER_KEY":40,"=":41,"PARAMETER_VALUE":42,"FRAGMENT":43,"fragment_args":44,"FRAGMENT_END":45,"fragment_arg":46,"FRAGMENT_VAR":47,"FRAGMENT_CONST":48,"MAP_BEGIN":49,"MAP_END":50,"pairs":51,"association":52,"ASSOCIATION_BEGIN":53,"collection":54,"COLLECTION_BEGIN":55,"COLLECTION_END":56,"pair":57,"KEY":58,"VALUE":59,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",9:"QUERY_BEGIN",11:"END",12:"QUERY",13:"RESULT_MAP",14:"(",16:")",18:"CACHE",19:",",20:"QUERY_ARG",22:"PLUGIN",25:"PLUGIN_VAR",26:"PLUGIN_CONST",30:"REFERENCE",31:"INLINE",32:"TEXT",35:"SECTION_END",36:"SECTION_SELF_CLOSE",37:"SECTION_DEF",40:"PARAMETER_KEY",41:"=",42:"PARAMETER_VALUE",43:"FRAGMENT",45:"FRAGMENT_END",47:"FRAGMENT_VAR",48:"FRAGMENT_CONST",49:"MAP_BEGIN",50:"MAP_END",53:"ASSOCIATION_BEGIN",55:"COLLECTION_BEGIN",56:"COLLECTION_END",58:"KEY",59:"VALUE"},
productions_: [0,[3,1],[3,2],[3,2],[3,3],[6,2],[6,1],[7,4],[8,1],[8,2],[8,4],[8,5],[8,2],[8,3],[8,5],[8,6],[8,2],[8,3],[8,5],[8,6],[8,3],[8,4],[8,6],[8,7],[15,3],[15,1],[17,2],[17,1],[21,2],[21,1],[23,2],[23,1],[24,1],[24,1],[10,2],[10,1],[27,1],[27,1],[27,1],[27,1],[27,1],[28,1],[28,4],[33,2],[33,3],[34,2],[34,1],[38,2],[38,1],[39,3],[39,1],[29,5],[29,2],[44,3],[44,1],[46,1],[46,1],[5,2],[5,3],[52,2],[52,3],[54,2],[54,3],[51,3],[51,1],[57,2],[57,2],[57,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {}; 
break;
case 2:
 return { map:$$[$0-1] }; 
break;
case 3:
 return { sql:$$[$0-1] }; 
break;
case 4:
 return { map:$$[$0-2], sql:$$[$0-1] }; 
break;
case 5:

      this.$ = $$[$0-1];
      this.$[$$[$0].name] = $$[$0];
    
break;
case 6:
 this.$ = {}; this.$[$$[$0].name] = $$[$0]; 
break;
case 7: case 42:
 this.$ = $$[$0-3]; this.$.block = $$[$0-1]; 
break;
case 8:
 this.$ = yy.query($$[$0], [], null, null, []); 
break;
case 9:
 this.$ = yy.query($$[$0-1], [], $$[$0], null, []); 
break;
case 10:
 this.$ = yy.query($$[$0-3], $$[$0-1], null, null, []); 
break;
case 11:
 this.$ = yy.query($$[$0-4], $$[$0-2], $$[$0], null, []); 
break;
case 12:
 this.$ = yy.query($$[$0-1], [], null, null, $$[$0]); 
break;
case 13:
 this.$ = yy.query($$[$0-2], [], $$[$0-1], null, $$[$0]); 
break;
case 14:
 this.$ = yy.query($$[$0-4], $$[$0-2], null, null, $$[$0]); 
break;
case 15:
 this.$ = yy.query($$[$0-5], $$[$0-3], $$[$0-1], null, $$[$0]); 
break;
case 16:
 this.$ = yy.query($$[$0-1], [], null, yy.cache($$[$0]), []); 
break;
case 17:
 this.$ = yy.query($$[$0-2], [], $$[$0-1], yy.cache($$[$0]), []); 
break;
case 18:
 this.$ = yy.query($$[$0-4], $$[$0-2], null, yy.cache($$[$0]), []); 
break;
case 19:
 this.$ = yy.query($$[$0-5], $$[$0-3], $$[$0-1], yy.cache($$[$0]), []); 
break;
case 20:
 this.$ = yy.query($$[$0-2], [], null, yy.cache($$[$0-1]), $$[$0]); 
break;
case 21:
 this.$ = yy.query($$[$0-3], [], $$[$0-2], yy.cache($$[$0-1]), $$[$0]); 
break;
case 22:
 this.$ = yy.query($$[$0-5], $$[$0-3], null, yy.cache($$[$0-1]), $$[$0]); 
break;
case 23:
 this.$ = yy.query($$[$0-6], $$[$0-4], $$[$0-2], yy.cache($$[$0-1]), $$[$0]); 
break;
case 24: case 53:
 this.$ = [].concat($$[$0-2], $$[$0]); 
break;
case 25:
 this.$ = [$$[$0]] 
break;
case 26: case 30:
 this.$ = [].concat($$[$0-1], $$[$0]); 
break;
case 27: case 31: case 35: case 54:
 this.$ = [$$[$0]]; 
break;
case 28:
 this.$ = yy.plugin($$[$0-1], $$[$0]); 
break;
case 29:
 this.$ = yy.plugin($$[$0], []); 
break;
case 32: case 55:
 this.$ = yy.argVar($$[$0]); 
break;
case 33: case 56:
 this.$ = yy.argConst($$[$0]); 
break;
case 34:
 this.$ = yy.appendNode($$[$0-1], $$[$0]); 
break;
case 36: case 37: case 41: case 48:
 this.$ = $$[$0]; 
break;
case 38:
 this.$ = yy.reference($$[$0]); 
break;
case 39:
 this.$ = yy.inline($$[$0]); 
break;
case 40:
 this.$ = yy.text($$[$0]); 
break;
case 43:
 this.$ = $$[$0-1]; 
break;
case 44:
 this.$ = $$[$0-2]; 
break;
case 45:
 this.$ = yy.section($$[$0-1], $$[$0], []); 
break;
case 46:
 this.$ = yy.section($$[$0], {}, []); 
break;
case 47:

			this.$ = $$[$0-1];
			for(var k in $$[$0]) {
				this.$[k] = $$[$0][k];
			}
		
break;
case 49:

			this.$ = {};
			this.$[$$[$0-2]] = $$[$0];
		
break;
case 50:

			this.$ = {};
			this.$[$$[$0]] = true;
		
break;
case 51:
 this.$ = yy.fragment($$[$0-4], $$[$0-2]); 
break;
case 52:
 this.$ = yy.fragment($$[$0-1], []); 
break;
case 57:
 this.$ = {}; 
break;
case 58:
 this.$ = yy.maps($$[$0-1]); 
break;
case 59: case 61:

      this.$ = yy.combi();
      if($$[$0-1]){
        this.$.extend = $$[$0-1];
      }
    
break;
case 60: case 62:

      this.$ = $$[$0-1];
      if($$[$0-2]){
        this.$.extend = $$[$0-2];
      }
    
break;
case 63:
 this.$ = yy.combi($$[$0-2], $$[$0]); 
break;
case 64:
 this.$ = yy.combi($$[$0]); 
break;
case 65:
 this.$ = yy.column($$[$0-1], $$[$0]); 
break;
case 66:
 this.$ = yy.association($$[$0-1], $$[$0]); 
break;
case 67:
 this.$ = yy.collection($$[$0-1], $$[$0]); 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:6,8:7,12:$V0,49:[1,5]},{1:[3]},{1:[2,1]},{4:[1,9],6:10,7:6,8:7,12:$V0},{4:[1,11],7:12,8:7,12:$V0},{50:[1,13],51:14,57:15,58:$V1},o($V2,[2,6]),{9:[1,17]},{9:[2,8],13:[1,18],14:[1,19],17:20,18:[1,21],21:22,22:$V3},{1:[2,2]},{4:[1,24],7:12,8:7,12:$V0},{1:[2,3]},o($V2,[2,5]),o($V2,[2,57]),{19:$V4,50:[1,25]},o($V5,[2,64]),{52:28,53:[1,30],54:29,55:[1,31],59:[1,27]},{10:32,27:33,28:34,29:35,30:$V6,31:$V7,32:$V8,33:39,34:40,37:$V9,43:$Va},{9:[2,9],17:43,18:[1,44],21:22,22:$V3},{15:45,20:[1,46]},{9:[2,12],21:47,22:$V3},{9:[2,16],17:48,21:22,22:$V3},o($Vb,[2,27]),o($Vb,[2,29],{23:49,24:50,25:$Vc,26:$Vd}),{1:[2,4]},o($V2,[2,58]),{57:53,58:$V1},o($V5,[2,65]),o($V5,[2,66]),o($V5,[2,67]),{50:[1,54],51:55,57:15,58:$V1},{51:57,56:[1,56],57:15,58:$V1},{11:[1,58],27:59,28:34,29:35,30:$V6,31:$V7,32:$V8,33:39,34:40,37:$V9,43:$Va},o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),{35:[1,60],36:[1,61]},{14:[1,62],45:[1,63]},o($Vf,[2,46],{38:64,39:65,40:$Vg}),{9:[2,13],21:47,22:$V3},{9:[2,17],17:67,21:22,22:$V3},{16:[1,68],19:[1,69]},o($Vh,[2,25]),o($Vb,[2,26]),{9:[2,20],21:47,22:$V3},o($Vb,[2,28],{24:70,25:$Vc,26:$Vd}),o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),o($V5,[2,63]),o($V5,[2,59]),{19:$V4,50:[1,71]},o($V5,[2,61]),{19:$V4,56:[1,72]},o($V2,[2,7]),o($Ve,[2,34]),{10:73,11:[1,74],27:33,28:34,29:35,30:$V6,31:$V7,32:$V8,33:39,34:40,37:$V9,43:$Va},o($Ve,[2,43]),{44:75,46:76,47:$Vj,48:$Vk},o($Ve,[2,52]),o($Vf,[2,45],{39:79,40:$Vg}),o($Vl,[2,48]),o($Vl,[2,50],{41:[1,80]}),{9:[2,21],21:47,22:$V3},{9:[2,10],13:[1,81],17:82,18:[1,83],21:22,22:$V3},{20:[1,84]},o($Vi,[2,30]),o($V5,[2,60]),o($V5,[2,62]),{11:[1,85],27:59,28:34,29:35,30:$V6,31:$V7,32:$V8,33:39,34:40,37:$V9,43:$Va},o($Ve,[2,44]),{16:[1,86],19:[1,87]},o($Vh,[2,54]),o($Vh,[2,55]),o($Vh,[2,56]),o($Vl,[2,47]),{42:[1,88]},{9:[2,11],17:89,18:[1,90],21:22,22:$V3},{9:[2,14],21:47,22:$V3},{9:[2,18],17:91,21:22,22:$V3},o($Vh,[2,24]),o($Ve,[2,42]),{45:[1,92]},{46:93,47:$Vj,48:$Vk},o($Vl,[2,49]),{9:[2,15],21:47,22:$V3},{9:[2,19],17:94,21:22,22:$V3},{9:[2,22],21:47,22:$V3},o($Ve,[2,51]),o($Vh,[2,53]),{9:[2,23],21:47,22:$V3}],
defaultActions: {2:[2,1],9:[2,2],11:[2,3],24:[2,4]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
  function trim(){
    yy_.yytext = yy_.yytext.trim();
  }
  function strip(start, end) {
    yy_.yytext = yy_.yytext.substr(start, yy_.yytext.length - (end ? end : 0));
  }
  function deleteWhitespace() {
    yy_.yytext = yy_.yytext.replace(/\s+/g, '');
  }
  function toNumber(){
    trim();
    yy_.yytext = Number(yy_.yytext);
  }
  function deleteQuotes(){
    trim();
    strip(1,2);
    yy_.yytext = yy_.yytext.replace(/\\"/g,'"');
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 4; 
break;
case 1: return 4; 
break;
case 2: return 4; 
break;
case 3:/* ignore comment */
break;
case 4:/* skip whitespace */
break;
case 5: strip(2, 3); trim(); return 11 
break;
case 6: this.begin('h'); trim(); strip(2); return 12; 
break;
case 7: this.popState(); this.begin('h'); trim(); strip(2); return 12; 
break;
case 8: this.popState(); this.begin('h'); trim(); strip(2); return 12; 
break;
case 9: return 14; 
break;
case 10: return 16; 
break;
case 11: return 19; 
break;
case 12: trim(); return 20; 
break;
case 13: trim(); strip(1); return 13; 
break;
case 14: trim(); return 18; 
break;
case 15: trim(); return 18; 
break;
case 16: this.begin('i'); deleteWhitespace(); strip(1); return 22; 
break;
case 17: this.popState(); this.begin("i"); deleteWhitespace(); strip(1); return 22 
break;
case 18: trim(); return 25; 
break;
case 19: toNumber(); return 26; 
break;
case 20: deleteQuotes(); return 26; 
break;
case 21: this.popState(); this.begin('q'); return 9; 
break;
case 22: this.popState(); this.popState(); this.begin('q'); return 9; 
break;
case 23: strip(1,1); return 32; 
break;
case 24: trim(); strip(1,1); return 30; 
break;
case 25: trim(); strip(1,1); return 31; 
break;
case 26: return 32; 
break;
case 27: this.begin('f'); strip(2); return 43; 
break;
case 28: this.popState(); return 45; 
break;
case 29: return 14; 
break;
case 30: return 16; 
break;
case 31: return 19; 
break;
case 32: return 47; 
break;
case 33: toNumber(); return 48; 
break;
case 34: deleteQuotes(); return 48; 
break;
case 35: this.begin("s"); strip(2); return 37; 
break;
case 36: trim(); return 40; 
break;
case 37: return 41; 
break;
case 38: deleteQuotes(); return 42; 
break;
case 39: this.popState(); return 36; 
break;
case 40: this.popState(); return 35; 
break;
case 41: this.begin('m'); return 49; 
break;
case 42:/* skip whitespace */
break;
case 43: return 50; 
break;
case 44: deleteWhitespace(); strip(0, 1); return 58; 
break;
case 45: return 19; 
break;
case 46: deleteWhitespace(); strip(0, 1); return 53; 
break;
case 47: deleteWhitespace(); strip(0, 1); return 55; 
break;
case 48: return 56; 
break;
case 49: trim(); return 59; 
break;
}
},
rules: [/^(?:$)/,/^(?:(\s*)$)/,/^(?:(\s*)$)/,/^(?:\/\/.*)/,/^(?:\s+)/,/^(?:\{\/([a-zA-Z_][a-zA-Z0-9_]*)(\s*)\})/,/^(?:(\s*)\{#([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\s*)\{#([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\s*)\{#([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\s*)\((\s*))/,/^(?:(\s*)\)(\s*))/,/^(?:(\s*),(\s*))/,/^(?:(\s*)([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\s*):([a-zA-Z_][a-zA-Z0-9_.]*))/,/^(?:(\s*)\+(([a-zA-Z_][a-zA-Z0-9_]*))?)/,/^(?:(\s*)-(([a-zA-Z_][a-zA-Z0-9_]*))?)/,/^(?:(\s*)\|(\s*)([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\s*)\|(\s*)([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:\s+([a-zA-Z_][a-zA-Z0-9_.]*))/,/^(?:\s+(-?\d+\.?\d*))/,/^(?:\s+(("(\\"|[^\"])*")|('(\\'|[^\'])*')))/,/^(?:(\s*)\})/,/^(?:(\s*)\})/,/^(?:[\\]["{"|"}"|"#"|"$"|\\]?)/,/^(?:#([a-zA-Z_][a-zA-Z0-9_.]*)(:([a-zA-Z_][a-zA-Z0-9_]*))?)/,/^(?:\$([a-zA-Z_][a-zA-Z0-9_.]*)(:([a-zA-Z_][a-zA-Z0-9_]*))?)/,/^(?:[^{\\#$]+)/,/^(?:\{<([a-zA-Z_][a-zA-Z0-9_.]*))/,/^(?:(\s*)["\/"]?\})/,/^(?:(\s*)\((\s*))/,/^(?:(\s*)\)(\s*))/,/^(?:(\s*),(\s*))/,/^(?:([a-zA-Z_][a-zA-Z0-9_.]*))/,/^(?:(-?\d+\.?\d*))/,/^(?:(("(\\"|[^\"])*")|('(\\'|[^\'])*')))/,/^(?:\{@([a-zA-Z_][a-zA-Z0-9_.]*))/,/^(?:\s+([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:(\s*)=(\s*))/,/^(?:(("(\\"|[^\"])*")|('(\\'|[^\'])*')))/,/^(?:(\s*)\/\})/,/^(?:(\s*)\})/,/^(?:\{)/,/^(?:\s+)/,/^(?:\})/,/^(?:(\*(\s*))?([a-zA-Z_][a-zA-Z0-9_]*)(\s*):)/,/^(?:,)/,/^(?:(([a-zA-Z_][a-zA-Z0-9_.]*)(\s*))?\{)/,/^(?:(([a-zA-Z_][a-zA-Z0-9_.]*)(\s*))?\[)/,/^(?:\])/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*)((\s*)\|(\s*)([a-zA-Z_][a-zA-Z0-9_]*)(\s+([a-zA-Z_][a-zA-Z0-9_]*))*)?)/],
conditions: {"q":{"rules":[1,5,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":false},"h":{"rules":[9,10,11,12,13,14,15,16,17,18,19,20,21,22],"inclusive":false},"m":{"rules":[2,8,42,43,44,45,46,47,48,49],"inclusive":false},"i":{"rules":[17,18,19,20,22],"inclusive":false},"f":{"rules":[28,29,30,31,32,33,34],"inclusive":false},"s":{"rules":[36,37,38,39,40],"inclusive":false},"INITIAL":{"rules":[0,3,4,6,41],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}